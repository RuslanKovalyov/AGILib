AGILib/
│
├── snn/                          # Core components of the spiking neural network
│   │
│   ├── __init__.py
│   │
│   ├── synapses.py
│   │   ├── class BaseSynaps      # Signal exchange and release of control markers (neurotransmitters) in the environment
│   │   └── ...
│   │
│   ├── dendrites.py              # Manages connections in an address space in the network (environment), route search during growth and connection building
│   │   ├── class BaseDendrit     # Keep channel width and can eliminate itself at (continuously) zero weight. may be inhibitory or excitatory in relation to the membrane
│   │   └── ...
│   │
│   ├── membranes.py              # Sums signals into potential and simulates charge leakage
│   │   ├── class BaseMembrane    # Sensitive to a neurotransmitters in the environment ( affects on leakage rate, action potential threshold, delays, learning, etc.)
│   │   └── ...
│   │
│   ├── cores.py                  # The central part of the neuron, includes the nucleus and the control periphery
│   │   ├── class BaseCore
│   │   │   ├── self.nucleus      # Genome (Life time, potential leak speed, delays, conections amount, method to create dendrite conections, dendrite num and typs, sinapse settings, and so-on)
│   │   │   └── ...
│   │   └── ...
│   │
│   ├── axons.py                  # Signal transfer, controls growth (optimization of position in the environment) for effective interaction with neurons
│   │   ├── class BaseAxon
│   │   │   └── ...
│   │   └── ...
│   │
│   ├── neurons.py                # Definitions for different types of neurons
│   │   ├── class BaseNeuron      # Base class for neurons
│   │   ├── class LIFNeuron       # Specific type of neuron (Leaky Integrate-and-Fire)
│   │   └── ...                   # More neuron types here
│   │
│   ├── layers.py                 # Definitions for different types of layers
│   │   ├── class BaseLayer       # Base class for layers
│   │   ├── def feedforward_layer # Method to create a feedforward layer
│   │   └── ...                   # More layer types here
│   │
│   └── networks.py               # Definitions for full networks
│
├── learning_rules/               # Contains definitions for learning rules (like STDP)
│   ├── __init__.py
│   ├── stdp.py                   # Spike-Timing Dependent Plasticity
│   └── ...                       # More learning rules here
│
├── utils/                        # Contains utility functions and classes
│   ├── __init__.py
│   ├── data_generation.py        # Functions to generate input data (like spike trains)
│   └── ...                       # More utility functions/classes here
│
├── tests/                        # Contains unit tests for the library
│   └── ...
│
├── examples/                     # Contains example scripts demonstrating the library usage
│   └── ...
││
├── LICENSE                       # Apache License Version 2.0, January 2004 
│
└── README.md                     # Brief introduction and user guide



Guidelines for Developing an Intuitive and User-Friendly AGI Library.

    1. Consistent API: Aim to provide a consistent and intuitive API across all modules of the library. Each component should have predictable behavior, making the library easy to learn and use.

    2. Comprehensive Documentation: The documentation should be comprehensive, covering all functions and classes in detail. It should clarify the purpose, inputs, and outputs of each function, supplemented with usage examples where possible.

    3. Practical Examples: Develop practical examples demonstrating how to use the library effectively. These examples should showcase the capabilities of the library and serve as a starting point for users.

    4. Modular Design: Design the library with modularity in mind. Separate modules should be created for different aspects like neuron types, network layers, learning rules, etc. This way, users can import and use only the components they need.

    5. Error Handling & Testing: Incorporate clear and informative error messages to facilitate debugging. Implement a comprehensive suite of tests to ensure the functionality of your library, improving its reliability.

    Compatibility with Other Libraries: Ensure compatibility with popular libraries like NumPy, Pandas, TensorFlow, and PyTorch wherever possible. This compatibility will facilitate the adoption of the library by users familiar with these platforms.